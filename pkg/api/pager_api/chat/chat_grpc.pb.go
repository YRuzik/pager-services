// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: chat_actions/chat_actions.proto

package pager_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatActions_CreateChat_FullMethodName = "/com.pager.api.ChatActions/CreateChat"
	ChatActions_Chatting_FullMethodName   = "/com.pager.api.ChatActions/Chatting"
)

// ChatActionsClient is the client API for ChatActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatActionsClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error)
	Chatting(ctx context.Context, opts ...grpc.CallOption) (ChatActions_ChattingClient, error)
}

type chatActionsClient struct {
	cc grpc.ClientConnInterface
}

func NewChatActionsClient(cc grpc.ClientConnInterface) ChatActionsClient {
	return &chatActionsClient{cc}
}

func (c *chatActionsClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatActions_CreateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatActionsClient) Chatting(ctx context.Context, opts ...grpc.CallOption) (ChatActions_ChattingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatActions_ServiceDesc.Streams[0], ChatActions_Chatting_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatActionsChattingClient{stream}
	return x, nil
}

type ChatActions_ChattingClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatActionsChattingClient struct {
	grpc.ClientStream
}

func (x *chatActionsChattingClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatActionsChattingClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatActionsServer is the server API for ChatActions service.
// All implementations should embed UnimplementedChatActionsServer
// for forward compatibility
type ChatActionsServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*Chat, error)
	Chatting(ChatActions_ChattingServer) error
}

// UnimplementedChatActionsServer should be embedded to have forward compatible implementations.
type UnimplementedChatActionsServer struct {
}

func (UnimplementedChatActionsServer) CreateChat(context.Context, *CreateChatRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatActionsServer) Chatting(ChatActions_ChattingServer) error {
	return status.Errorf(codes.Unimplemented, "method Chatting not implemented")
}

// UnsafeChatActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatActionsServer will
// result in compilation errors.
type UnsafeChatActionsServer interface {
	mustEmbedUnimplementedChatActionsServer()
}

func RegisterChatActionsServer(s grpc.ServiceRegistrar, srv ChatActionsServer) {
	s.RegisterService(&ChatActions_ServiceDesc, srv)
}

func _ChatActions_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatActionsServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatActions_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatActionsServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatActions_Chatting_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatActionsServer).Chatting(&chatActionsChattingServer{stream})
}

type ChatActions_ChattingServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatActionsChattingServer struct {
	grpc.ServerStream
}

func (x *chatActionsChattingServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatActionsChattingServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatActions_ServiceDesc is the grpc.ServiceDesc for ChatActions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatActions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.pager.api.ChatActions",
	HandlerType: (*ChatActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatActions_CreateChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chatting",
			Handler:       _ChatActions_Chatting_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat_actions/chat_actions.proto",
}
