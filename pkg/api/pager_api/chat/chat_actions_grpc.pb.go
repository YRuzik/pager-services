// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: chat/chat_actions.proto

package pager_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "pager-services/pkg/api/pager_api/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatActionsClient is the client API for ChatActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatActionsClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error)
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*common.Empty, error)
}

type chatActionsClient struct {
	cc grpc.ClientConnInterface
}

func NewChatActionsClient(cc grpc.ClientConnInterface) ChatActionsClient {
	return &chatActionsClient{cc}
}

func (c *chatActionsClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/com.pager.api.ChatActions/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatActionsClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/com.pager.api.ChatActions/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatActionsServer is the server API for ChatActions service.
// All implementations should embed UnimplementedChatActionsServer
// for forward compatibility
type ChatActionsServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*Chat, error)
	SendMessage(context.Context, *ChatMessage) (*common.Empty, error)
}

// UnimplementedChatActionsServer should be embedded to have forward compatible implementations.
type UnimplementedChatActionsServer struct {
}

func (UnimplementedChatActionsServer) CreateChat(context.Context, *CreateChatRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatActionsServer) SendMessage(context.Context, *ChatMessage) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

// UnsafeChatActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatActionsServer will
// result in compilation errors.
type UnsafeChatActionsServer interface {
	mustEmbedUnimplementedChatActionsServer()
}

func RegisterChatActionsServer(s grpc.ServiceRegistrar, srv ChatActionsServer) {
	s.RegisterService(&ChatActions_ServiceDesc, srv)
}

func _ChatActions_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatActionsServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pager.api.ChatActions/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatActionsServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatActions_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatActionsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pager.api.ChatActions/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatActionsServer).SendMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatActions_ServiceDesc is the grpc.ServiceDesc for ChatActions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatActions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.pager.api.ChatActions",
	HandlerType: (*ChatActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatActions_CreateChat_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatActions_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat_actions.proto",
}
